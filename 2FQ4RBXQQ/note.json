{
  "paragraphs": [
    {
      "text": "# \n#   Follows Gaia EDR3 science demonstration paper DPACP-81 (Smart et al.) in classifying astrometric solutions as good or bad\n#   via supervised ML. Employs a Random Forrest classifier plus appropriately defined training sets - see\n#\n#   https://gaia.esac.esa.int/dpacsvn/DPAC/docs/DpacPublications/DR3PerformanceVerification/DPACP-81/main_submitted2308.pdf\n#\n#   (DPAC password protected) for further details. The work flow implemented here follows closely that described in Section 2, \"GCNS Generation\"\n#   (GCNS \u003d Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (\u003d nearby) sample.\n#\n#   Presently implemented for Gaia DR2; deploy and check against GEDR3 when released.\n#",
      "user": "gaiauser",
      "dateUpdated": "2020-10-16 09:35:38.837",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:1: error: illegal start of definition\n#\n^\n\u003cconsole\u003e:8: error: Invalid literal number\n#   (GCNS \u003d Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (\u003d nearby) sample.\n                                                                          ^\n\u003cconsole\u003e:11: error: identifier expected but \u0027#\u0027 found.\n#\n^\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1602600177106_-1556858460",
      "id": "20201013-131059_546082898",
      "dateCreated": "2020-10-13 14:42:57.106",
      "dateStarted": "2020-10-16 09:35:38.861",
      "dateFinished": "2020-10-16 09:35:38.876",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n# define the data source\ngs_df \u003d sqlContext.read.parquet(\"/data/gaia/*.parquet\")\n\n# register as SQL-queryable \ngs_df.createOrReplaceTempView(\"gaia_source\")\n",
      "user": "gaiauser",
      "dateUpdated": "2020-10-16 09:35:41.796",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1602600177108_-1349932317",
      "id": "20201013-131649_1734629667",
      "dateCreated": "2020-10-13 14:42:57.108",
      "dateStarted": "2020-10-16 09:35:41.812",
      "dateFinished": "2020-10-16 09:35:49.696",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n# a conservative selection of everything that COULD be within 100pc, including things with measured \n# distances putting them outside the 100pc horizon when their true distances are within, and also including \n# loads of spurious chaff with the wheat of course:\nall_sources_df \u003d spark.sql(\"SELECT source_id FROM gaia_source WHERE parallax \u003e +8.0\")\nall_sources_df.count()\n# (cf. GEDR3: 1,211,740 sources) ",
      "user": "admin",
      "dateUpdated": "2020-10-13 14:42:57.108",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1602600177108_380683396",
      "id": "20201013-132418_278702125",
      "dateCreated": "2020-10-13 14:42:57.108",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n# bad astrometric solutions: negative (unphysical!) parallaxes at high significance where\n# the parallax threshold corresponds to that on the +ve (physical) side of the parallax distribution\nbad_ast_sources_df \u003d spark.sql(\"SELECT source_id FROM gaia_source WHERE parallax \u003c -8.0\")\nbad_ast_sources_df.count()\n# (cf. GEDR3: 512,288 sources)\n\n",
      "user": "admin",
      "dateUpdated": "2020-10-13 14:42:57.108",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1602600177108_-470534174",
      "id": "20201013-131204_2008164958",
      "dateCreated": "2020-10-13 14:42:57.108",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n\n# get the 2MASS photometry for the set of examples of good astrometric solutions (uses GACS call-out for DPAC crossmatch at GDR2)\n#\n# TODO: replace this with an internal GEDR3/2MASS match (using AXS) when deployed.\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom astroquery.utils.tap.core import TapPlus\ngaia \u003d TapPlus(url\u003d\"https://gea.esac.esa.int/tap-server/tap\")\n\nadql_query \u003d \u0027SELECT g.source_id, phot_g_mean_mag, j_m, h_m, ks_m \u0027 + \\\n             \u0027FROM gaiadr2.gaia_source AS g, gaiadr2.tmass_best_neighbour AS x, gaiadr1.tmass_original_valid AS t \u0027 + \\\n             \u0027WHERE g.source_id \u003d x.source_id AND x.tmass_oid \u003d t.tmass_oid\u0027 + \\ \n             \u0027 AND parallax \u003e 8.0 AND ABS(g.b) \u003e 25.0\u0027 + \\\n             \u0027 AND 0\u003dCONTAINS(POINT(\u0027ICRS\u0027, g.ra, g.dec), CIRCLE(\u0027ICRS\u0027, 13.1866666667, -72.82861111111, 3.0))\u0027 + \\\n             \u0027 AND 0\u003dCONTAINS(POINT(\u0027ICRS\u0027, g.ra, g.dec), CIRCLE(\u0027ICRS\u0027, 80.89375, -69.7561111111, 6.0))\u0027\n# ... last three predicates exclude low Galactic latitudes and the Magellanic Clouds.\n\n# execute the query\njob \u003d gaia.launch_job(adql_query)\nresults \u003d job.get_results()\n\n",
      "user": "admin",
      "dateUpdated": "2020-10-13 14:42:57.109",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1602600177109_-431194604",
      "id": "20201013-134856_1401782262",
      "dateCreated": "2020-10-13 14:42:57.109",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nimport astropy\nfrom pyvo.dal import TAPService\n\ntap \u003d TAPService(\"https://gea.esac.esa.int/tap-server/tap\")\n\nadql_query \u003d \u0027SELECT TOP 10 * FROM gaiadr2.gaia_source\u0027\n\nresults \u003d tap.search(adql_query, maxrec\u003d\"20000000\", mode\u003d\"sync\")\nresults\n",
      "user": "admin",
      "dateUpdated": "2020-10-13 15:34:28.388",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cTable length\u003d10\u003e\n    solution_id             designation          ... epoch_photometry_url\n                                                 ...                     \n       int64                   object            ...        object       \n------------------- ---------------------------- ... --------------------\n1635721458409799680 Gaia DR2 1972009357511941888 ...                     \n1635721458409799680 Gaia DR2 1971985791035702144 ...                     \n1635721458409799680 Gaia DR2 1971982973542182912 ...                     \n1635721458409799680 Gaia DR2 1971978880422594176 ...                     \n1635721458409799680 Gaia DR2 1972001081124417536 ...                     \n1635721458409799680 Gaia DR2 1971996305115139200 ...                     \n1635721458409799680 Gaia DR2 1971997640840463616 ...                     \n1635721458409799680 Gaia DR2 1971989875539700480 ...                     \n1635721458409799680 Gaia DR2 1971977407256200704 ...                     \n1635721458409799680 Gaia DR2 1972019875897954432 ...                     "
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1602603050589_377682313",
      "id": "20201013-153050_430330294",
      "dateCreated": "2020-10-13 15:30:50.589",
      "dateStarted": "2020-10-13 15:34:28.400",
      "dateFinished": "2020-10-13 15:34:28.790",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\n",
      "user": "admin",
      "dateUpdated": "2020-10-13 15:31:27.491",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1602603087490_953228314",
      "id": "20201013-153127_1466332449",
      "dateCreated": "2020-10-13 15:31:27.490",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Good astrometric solutions via Random Forrest classifier",
  "id": "2FQ4RBXQQ",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "python:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}